
typedef Vec3<float> Vec3s

struct Collision
    object (Object*)
    coord (Vec3s)

const Collision NO_COLLISION { NULL, { 0.0, 0.0, 0.0 } }


class Camera
    pos (coordinate)
    fov (int)
    f   (int)
    a   (float)


abstract class Object
    amb (vec3)
    dif (vec3)
    spe (vec3)
    shi (float)
    GET-NORMAL <- point
    CHECK-COLLISION <- p0, d

Plane   inherits Object
Sphere  inherits Object
Mesh    inherits Object


class Light
    pos (Vec3s)
    amb (vec3)
    dif (vec3)
    spe (vec3)


Scene
    camera (Camera *)
    List of Object*
    List of Lights*


MAIN
    scene_file := [Get filename from cmd-line args]
    scene := LOAD-SCENE <- scene_file

    pixel_data := RAYTRACE <- scene
    image := RENDER <- pixel_data

    DISPLAY <- image
    SAVE <- image


LOAD-SCENE
IN filename
OUT scene*
    scene := NEW Scene

    TRY
        file := OPEN filename
        num_objects <- fscanf <- file, ...

        i := 0
        WHILE i < num_entities DO
            entity_type := (string)fscanf <- file, ...
            IF EOF THEN
                THROW EXCEPTION <- "unexpected EOF"

            SWITCH entity_type
                CASE 'camera':
                    scene->camera := PARSE-CAMERA <- file

                CASE 'plane':
                    scene->objects.PUSH-BACK <- PARSE-PLANE <- file

                CASE 'sphere':
                    scene->objects.PUSH-BACK <- PARSE-SPHERE <- file

                CASE 'mesh':
                    scene->objects.PUSH-BACK <- PARSE-MESH <- file

                CASE 'light':
                    scene->lights.PUSH-BACK <- PARSE-LIGHT <- file

                DEFAULT:
                    THROW EXCEPTION "unexpected entity type"

            i++
        ENDWHILE

        CLOSE <- file
        RETURN scene

    CATCH Exception
        CLOSE <- file
        RETURN nullptr

LOAD-SCENE-2
IN filename
OUT 


READ-FILE
IN filename
OUT List of strings in file (entry = line)
    file := OPEN filename
    file_as_list := new list of string

    IF NOT file.is_open THEN
        RETURN file_as_list

    WHILE GETLINE <- file, line THEN
        [append next line to file_as_list]
    ENDWHLE

    RETURN file_as_list



PARSE-CAMERA
IN file (FILE*)
OUT camera (Camera*)
    camera := new Camera
    IF fscanf ... != NUM_CAMERA_ARGS THEN
        THROW EXCEPTION

    RETURN camera

PARSE-PLANE
...


RAYTRACE
IN scene
OUT pixel_data (2D float array)
    camera := scene->camera
    camera_pos := camera->pos
    
    height := 2 * camera->f * TAN <- (RADIANS <- camera->fov) / 2
    width := camera->a * height

    pixel_data := float[width][height]

    FOR x <- 0 TO width
        FOR y <- 0 TO height
            pixel_world_space := (x, y, -f) - (width/2, height/2, 0)
            ray_dir := pixel_world_space - camera_pos

            collision := FIRE-RAY(camera_pos, ray_dir, scene)

            IF collision != NO_COLLISION THEN
                pixel_data[pixel] := COMPUTE-COLOUR <- poi, obj, scene
            ELSE
                pixel_data[pixel] := background_colour
    
    RETURN pixel_data


FIRE-RAY
IN p0 (coordinate), d (direction vector), scene
OUT (poi, obj) (coord-obj tuple)
Returns the closest object & the point of intersection for a given ray
If there is no intersection, returns NO_COLLISION
    t := INFINITY
    obj := NULL

    FOR object IN scene
        t_candidate := object.CHECK-COLLISION <- p0, d, object
        IF t_candidate >= 0 AND t_candidate < t THEN
            t := t_candidate
            obj := object

    IF t < INFINITY THEN
        RETURN (p0 + dt, obj)
    ELSE
        RETURN NO_COLLISION


Plane::CHECK-COLLISION
SOURCE http://www.geomalgorithms.com/a05-_intersect-1.html
IN p0, d
OUT t
    p1 := p0 + d
    s1 := DOT(normal, v0 - p0) / DOT(normal, p1 - p0)
    RETURN s1


Sphere::CHECK-COLLISION
IN p0, d
OUT t
    a := 1
    b := 2 * (d.x * (p0.x - pos.x) + d.y * (p0.y - pos.y) + d.z * (p0.z - pos.z))
    c := (p0.x - pos.x)^2 + (p0.y - pos.y)^2 + (p0.z - pos.z)^2 - r^2

    radicand := b^2 - (4 * a * c)
    IF radicand < 0 THEN
        t := -1 // this can be an arbitrary negative value
    ELSE
        t0 := (-b + SQRT <- radicand) / (2 * a)
        t1 := (-b - SQRT <- radicand) / (2 * a)

        IF t0 < 0 THEN
            t := t1
        ELSE IF t1 < 0 THEN
            t := t0
        ELSE
            t := MIN <- t0, t1

    RETURN t

Sphere::CALC-NORMAL
IN collision (Vec3)
OUT normal (Vec3)

    n := (1 / r) * (collision - pos)

Mesh::CHECK-COLLISION
IN p0, d
OUT t0


COMPUTE-COLOUR
IN point (coordinate), object, scene
OUT colour
    colour := 0
    FOR each light in scene
        l := NORMALIZE <- (light->pos - point)
        poi, obj := FIRE-RAY <- point, l, scene

        IF poi = NO_COLLISION THEN
            phong := CALC-PHONG <- point, light, object
            <Calculate specular reflection>
            <Calculate specular transmission>
            colour += phong <+ specular_ref + specular_trans>


CALC-PHONG
IN pos, light, object
OUT colour
    l := NORMALIZE <- light->pos - pos
    n := NORMALIZE <- object.GET-NORMAL(pos)
    v := NORMALIZE <- -pos     // since camera is always at 0,0,0
    r := REFLECT <- l, n

    l_angle := MAX <- dot(l,n), 0
    v_angle := MAX <- dot(r,v), 0

    amb := light->amb * object->amb 
    dif := light->dif * object->dif * l_angle
    spe := light->spe * object->spe * (v_angle ^ object->a)

    RETURN (amb + dif + spe)


RENDER
IN pixel_data (2D float array)
OUT image (CImg<float>)


DISPLAY
IN image (CImg<float>)
